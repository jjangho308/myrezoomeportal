{"version":3,"sources":["../../test/crypto.test.js"],"names":["describe","skip","crypto","before","setDefaultSpec","symLength","asmLength","encode","it","generateAESKey","err","aes","console","log","done","generateRSAKeyPair","keypair","pub","pri","plain","encryptAES","encrypted","decryptAES","ase","decrypted","encryptRSA","decryptRSA"],"mappings":"aAAA,kD;;AAEAA,SAASC,IAAT,CAAc,kBAAd,EAAkC,YAAM;AACpC,QAAIC,MAAJ;;AAEAC,WAAO,oBAAP,EAA6B,YAAM;AAC/BD,iBAAS,sBAAT;AACAA,eAAOE,cAAP,CAAsB;AAClBC,uBAAY,EADM;AAElBC,uBAAY,EAFM;AAGlBC,oBAAS,QAHS,EAAtB;;AAKH,KAPD;;AASAC,OAAG,kBAAH,EAAuB,gBAAQ;AAC3BN,eAAOO,cAAP,CAAsB,IAAtB,EAA4B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtCC,oBAAQC,GAAR,CAAY,eAAeF,GAA3B;AACAG;AACH,SAHD;AAIH,KALD;;AAOAN,OAAG,sBAAH,EAA2B,gBAAQ;AAC/BN,eAAOa,kBAAP,CAA0B,IAA1B,EAAgC,UAACL,GAAD,EAAMM,OAAN,EAAkB;AAC9CJ,oBAAQC,GAAR,CAAY,cAAcG,QAAQC,GAAlC;AACAL,oBAAQC,GAAR,CAAY,cAAcG,QAAQE,GAAlC;AACAJ;AACH,SAJD;AAKH,KAND;;AAQAN,OAAG,qBAAH,EAA0B,gBAAQ;AAC9B,YAAIW,QAAQ,eAAZ;AACAjB,eAAOO,cAAP,CAAsB,UAACE,GAAD,EAAS;AAC3BT,mBAAOkB,UAAP,CAAkBD,KAAlB,EAAyBR,GAAzB,EAA8B,UAACU,SAAD,EAAe;AACzCnB,uBAAOoB,UAAP,CAAkBD,SAAlB,EAA6BE,GAA7B,EAAkC,UAACC,SAAD,EAAe;AAC7C,wBAAIL,SAASK,SAAb;AACIV;AACP,iBAHD;AAIH,aALD;AAMH,SAPD;AAQH,KAVD;;AAYAN,OAAG,qBAAH,EAA0B,gBAAQ;AAC9B,YAAIW,QAAQ,eAAZ;AACAjB,eAAOO,cAAP,CAAsB,UAACO,OAAD,EAAa;AAC/Bd,mBAAOuB,UAAP,CAAkBN,KAAlB,EAAyBH,QAAQC,GAAjC,EAAsC,UAACI,SAAD,EAAe;AACjDnB,uBAAOwB,UAAP,CAAkBL,SAAlB,EAA6BL,QAAQE,GAArC,EAA0C,UAACM,SAAD,EAAe;AACrD,wBAAIL,SAASK,SAAb;AACIV;AACP,iBAHD;AAIH,aALD;AAMH,SAPD;AAQH,KAVD;;AAYAN,OAAG,eAAH,EAAoB,gBAAQ;AACxB,YAAIW,QAAQ,eAAZ;AACAjB,eAAOO,cAAP,CAAsB,UAACO,OAAD,EAAa;AAC/Bd,mBAAOuB,UAAP,CAAkBN,KAAlB,EAAyBH,QAAQE,GAAjC,EAAsC,UAACG,SAAD,EAAe;AACjDnB,uBAAOwB,UAAP,CAAkBL,SAAlB,EAA6BL,QAAQC,GAArC,EAA0C,UAACO,SAAD,EAAe;AACrD,wBAAIL,SAASK,SAAb;AACIV;AACP,iBAHD;AAIH,aALD;AAMH,SAPD;AAQH,KAVD;AAWH,CA9DD","file":"crypto.test.js","sourcesContent":["import CryptoManager from '../modules/crypto/crypto';\r\n\r\ndescribe.skip('Crypto test suit', () => {\r\n    var crypto;\r\n\r\n    before('Crypto module init', () => {\r\n        crypto = new CryptoManager();\r\n        crypto.setDefaultSpec({\r\n            symLength : 64,\r\n            asmLength : 64,\r\n            encode : 'base64'\r\n        })\r\n    });\r\n\r\n    it('Generate AES key', done => {\r\n        crypto.generateAESKey(null, (err, aes) => {\r\n            console.log('AES Key : ' + aes);\r\n            done();\r\n        });\r\n    })\r\n\r\n    it('Generate RSA keypair', done => {\r\n        crypto.generateRSAKeyPair(null, (err, keypair) => {\r\n            console.log('PubKey : ' + keypair.pub);\r\n            console.log('PriKey : ' + keypair.pri);\r\n            done();\r\n        });\r\n    })\r\n\r\n    it('AES Encrypt/Decrypt', done => {\r\n        var plain = \"Hello, world!\";\r\n        crypto.generateAESKey((aes) => {\r\n            crypto.encryptAES(plain, aes, (encrypted) => {\r\n                crypto.decryptAES(encrypted, ase, (decrypted) => {\r\n                    if (plain == decrypted)\r\n                        done();\r\n                })\r\n            })\r\n        });\r\n    })\r\n\r\n    it('RSA Encrypt/Decrypt', done => {\r\n        var plain = \"Hello, world!\";\r\n        crypto.generateAESKey((keypair) => {\r\n            crypto.encryptRSA(plain, keypair.pub, (encrypted) => {\r\n                crypto.decryptRSA(encrypted, keypair.pri, (decrypted) => {\r\n                    if (plain == decrypted)\r\n                        done();\r\n                })\r\n            })\r\n        });\r\n    })\r\n\r\n    it('RSA Signature', done => {\r\n        var plain = \"Hello, world!\";\r\n        crypto.generateAESKey((keypair) => {\r\n            crypto.encryptRSA(plain, keypair.pri, (encrypted) => {\r\n                crypto.decryptRSA(encrypted, keypair.pub, (decrypted) => {\r\n                    if (plain == decrypted)\r\n                        done();\r\n                })\r\n            })\r\n        });\r\n    })\r\n})"]}