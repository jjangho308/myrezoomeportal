{"version":3,"sources":["../../../../src/models/anchor/anchor_dao.js"],"names":["AnchorDAO","host","keyspacename","client","Client","contactPoints","keyspace","usrId","trxId","delFg","formId","orgCd","subCd","callback","query","put","params","execute","then","console","log","result","userId","getbyuseridformid","response","rows","txId","getByTxid"],"mappings":";AACA;AADA,mD,iEAEA,8C;;AAEA;;;;;;AAMMA,S;;AAEF;AACA;;AAEA,uBAAYC,IAAZ,EAAkBC,YAAlB,EAA+B;AAC3B;AACA;AACA,aAAKC,MAAL,GAAc,IAAI,0BAAKC,MAAT,CAAgB,EAAEC,eAAe,CAACJ,IAAD,CAAjB,EAAyBK,UAAUJ,YAAnC,EAAhB,CAAd;AACH;;AAED;;;;;;;AAOcK,a,EAAOC,K,EAAOC,K,EAAOC,M,EAAQC,K,EAAOC,K,EAAOC,Q,EAAS;AAC9D;AACA,gBAAIC,QAAQ,uBAAeC,GAA3B;;AAEA,gBAAIC,SAAS,CAACT,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,KAArC,CAAb;;AAEA,iBAAKT,MAAL,CAAYc,OAAZ,CAAoBH,KAApB,EAA2BE,MAA3B;AACCE,gBADD,CACM,kBAAU;;AAEZC,wBAAQC,GAAR,CAAY,kDAAZ;AACAD,wBAAQC,GAAR,CAAYC,MAAZ;AACAF,wBAAQC,GAAR,CAAY,oDAAZ;;AAEA;AACAP,yBAASQ,MAAT;AACA;AACH,aAVD;;AAYH,S;;AAEoBC,c,EAAQZ,M,EAAQG,Q,EAAU;;AAE3C,gBAAIC,QAAQ,uBAAeS,iBAA3B;;AAEA,gBAAIP,SAAS,CAACM,MAAD,EAASZ,MAAT,CAAb;;AAEA,iBAAKP,MAAL,CAAYc,OAAZ,CAAoBH,KAApB,EAA2BE,MAA3B;AACCE,gBADD,CACM,kBAAU;;AAEZC,wBAAQC,GAAR,CAAY,kDAAZ;AACAD,wBAAQC,GAAR,CAAYC,MAAZ;AACAF,wBAAQC,GAAR,CAAY,oDAAZ;;AAEA,oBAAII,WAAWH,OAAOI,IAAtB;AACAZ,yBAASW,QAAT;AACA;AACH,aAVD;;AAYA;AACH,S;;AAESE,Y,EAAMb,Q,EAAU;AACtB;AACA,gBAAIC,QAAQ,uBAAea,SAA3B;;AAEA,gBAAIX,SAAS,CAACU,IAAD,CAAb;;AAEA,iBAAKvB,MAAL,CAAYc,OAAZ,CAAoBH,KAApB,EAA2BE,MAA3B;AACCE,gBADD,CACM,kBAAU;;AAEZC,wBAAQC,GAAR,CAAY,kDAAZ;AACAD,wBAAQC,GAAR,CAAYC,MAAZ;AACAF,wBAAQC,GAAR,CAAY,oDAAZ;;AAEA,oBAAII,WAAWH,OAAOI,IAAtB;AACAZ,yBAASW,QAAT;AACA;AACH,aAVD;AAWH,S;;;AAGUxB,S","file":"anchor_dao.js","sourcesContent":["import csdr from 'cassandra-driver';\r\n//import AbstractDAO from 'abstract_dao';\r\nimport cassandraquery from './anchor_query';\r\n\r\n/**\r\n * DAO for anchor model. <br />\r\n * \r\n * @since 180302\r\n * @author 광욱\r\n*/\r\nclass AnchorDAO {\r\n\r\n    //client = new csdr.Client({ contactPoints: ['127.0.0.1'], keyspace: 'rzm_anchor' });\r\n    //var client;\r\n\r\n    constructor(host, keyspacename){\r\n        //this.client = client;\r\n        //super();\r\n        this.client = new csdr.Client({ contactPoints: [host], keyspace: keyspacename });\r\n    }\r\n\r\n    /*\r\n    constructor(client){\r\n        this.client = client;\r\n    }\r\n    */\r\n    \r\n\r\n    putanchordata(usrId, trxId, delFg, formId, orgCd, subCd, callback){\r\n        //const client = new csdr.Client({ contactPoints: ['127.0.0.1'], keyspace: 'rzm_anchor' });\r\n        var query = cassandraquery.put;\r\n\r\n        var params = [usrId, trxId, delFg, formId, orgCd, subCd];\r\n\r\n        this.client.execute(query, params)\r\n        .then(result => {\r\n            \r\n            console.log(\"===================execute get==================\");\r\n            console.log(result);\r\n            console.log(\"==================================================\");\r\n\r\n            //var response = result.rows;\r\n            callback(result);\r\n            //console.log('User with trx_id %s', result.rows[0].trx_id);\r\n        });\r\n        \r\n    }\r\n\r\n    getbyUserIdAndFormId(userId, formId, callback) {\r\n        \r\n        var query = cassandraquery.getbyuseridformid;\r\n\r\n        var params = [userId, formId];\r\n\r\n        this.client.execute(query, params)\r\n        .then(result => {\r\n            \r\n            console.log(\"===================execute get==================\");\r\n            console.log(result);\r\n            console.log(\"==================================================\");\r\n\r\n            var response = result.rows;\r\n            callback(response);\r\n            //console.log('User with trx_id %s', result.rows[0].trx_id);\r\n        });\r\n\r\n        //this.get(map, callback);\r\n    }\r\n\r\n    getbyTxId(txId, callback) {\r\n        //const client = new csdr.Client({ contactPoints: ['127.0.0.1'], keyspace: 'rzm_anchor' });\r\n        var query = cassandraquery.getByTxid;\r\n\r\n        var params = [txId];\r\n\r\n        this.client.execute(query, params)\r\n        .then(result => {\r\n            \r\n            console.log(\"===================execute get==================\");\r\n            console.log(result);\r\n            console.log(\"==================================================\");\r\n\r\n            var response = result.rows;\r\n            callback(response);\r\n            //console.log('User with trx_id %s', result.rows[0].trx_id);\r\n        });\r\n    }\r\n}\r\n\r\nexport default AnchorDAO;"]}