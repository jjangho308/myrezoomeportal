{"version":3,"sources":["../../../../src/models/org/org_dao.js"],"names":["OrgDao","connectionPool","org","cb","orgcodes","makequery","format","getByCodes","getConnection","err","connection","query","rows","result","i","push","OrgModel","release","findAll","response","code","opt","user"],"mappings":"inBAAA;AACA,2C;AACA,4B;;AAEA;;;;;;AAMMA,M;AACF,oBAAYC,cAAZ,EAA4B;AACxB,aAAKA,cAAL,GAAsBA,cAAtB;AACH,K;;AAEGC,W,EAAKC,E,EAAI;;AAEZ;;AAED;;;;;;;;AAQIC,gB,EAAUD,E,EAAI;;AAEd,gBAAIE,YAAY,eAAKC,MAAL,CAAY,oBAASC,UAArB,EAAiCH,QAAjC,CAAhB;;AAEA,iBAAKH,cAAL,CAAoBO,aAApB,CAAkC,UAACC,GAAD,EAAMC,UAAN,EAAqB;AACnD,oBAAID,GAAJ,EAAS;AACLN,uBAAGM,GAAH;AACH,iBAFD,MAEO;AACHC,+BAAWC,KAAX,CAAiBN,SAAjB,EAA4B,UAAUI,GAAV,EAAeG,IAAf,EAAqB;AAC7C,4BAAIH,GAAJ,EAAS;AACLN,+BAAGM,GAAH;AACH,yBAFD,MAEO;AACH,gCAAII,SAAS,EAAb;AACA,iCAAK,IAAIC,CAAT,IAAcF,IAAd,EAAoB;AAChBC,uCAAOE,IAAP,CAAY,IAAIC,QAAJ,CAAaJ,KAAKE,CAAL,CAAb,CAAZ;AACH;AACDJ,uCAAWO,OAAX;AACAd,+BAAG,IAAH,EAASS,IAAT;AACH;AACJ,qBAXD;AAYH;AACJ,aAjBD;AAkBH,S;;AAEOD,a,EAAOR,E,EAAI;;AAEf,gBAAIE,YAAY,eAAKC,MAAL,CAAY,oBAASY,OAArB,CAAhB;;AAEA,iBAAKR,UAAL,CAAgBC,KAAhB,CAAsBN,SAAtB,EAAiC,UAAUI,GAAV,EAAeG,IAAf,EAAqB;AAClD,oBAAIH,GAAJ,EAAS;AACL,0BAAMA,GAAN;AACH,iBAFD,MAEO;AACH,wBAAIU,WAAW,EAAf;AACAA,6BAASC,IAAT,GAAgB,KAAhB;AACAD,6BAASV,GAAT,GAAe,EAAf;AACA;AACAN,uBAAGS,IAAH;AACH;AACJ,aAVD;AAWH,S;;AAEGS,W,EAAKC,I,EAAMnB,E,EAAI;;AAElB,S;;AAEGkB,W,EAAKlB,E,EAAI;;AAEZ,S;;AAEMkB,W,EAAKlB,E,EAAI;;AAEf,S;;;AAGUH,M","file":"org_dao.js","sourcesContent":["//import AbstractDAO from 'abstract_dao.js';\r\nimport orgQuery from './org_query.js';\r\nimport util from 'util';\r\n\r\n/**\r\n * DAO for org. <br />\r\n * \r\n * @since 180306\r\n * @author KWANGWOOK\r\n */\r\nclass OrgDao {\r\n    constructor(connectionPool) {\r\n        this.connectionPool = connectionPool;\r\n    }\r\n\r\n    put(org, cb) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Get multiple OrgModel by orgcodes. <br />\r\n     * \r\n     * @since 180313\r\n     * \r\n     * @param {string} orgcode Specific orgcode.\r\n     * @param {function(err:Error, result:OrgModel[])} cb Callback.\r\n     */\r\n    get(orgcodes, cb) {\r\n\r\n        var makequery = util.format(orgQuery.getByCodes, orgcodes);\r\n\r\n        this.connectionPool.getConnection((err, connection) => {\r\n            if (err) {\r\n                cb(err);\r\n            } else {\r\n                connection.query(makequery, function (err, rows) {\r\n                    if (err) {\r\n                        cb(err);\r\n                    } else {\r\n                        var result = [];\r\n                        for (var i in rows) {\r\n                            result.push(new OrgModel(rows[i]));\r\n                        }\r\n                        connection.release();\r\n                        cb(null, rows);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    findAll(query, cb) {\r\n\r\n        var makequery = util.format(orgQuery.findAll);\r\n\r\n        this.connection.query(makequery, function (err, rows) {\r\n            if (err) {\r\n                throw err;\r\n            } else {\r\n                var response = {};\r\n                response.code = '200';\r\n                response.err = '';\r\n                //res.send(response);\r\n                cb(rows);\r\n            }\r\n        });\r\n    }\r\n\r\n    set(opt, user, cb) {\r\n\r\n    }\r\n\r\n    del(opt, cb) {\r\n\r\n    }\r\n\r\n    delall(opt, cb) {\r\n\r\n    }\r\n}\r\n\r\nexport default OrgDao;"]}