'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _hashmap = require('hashmap');var _hashmap2 = _interopRequireDefault(_hashmap);

var _abstract_manager = require('../abstract_manager');var _abstract_manager2 = _interopRequireDefault(_abstract_manager);

var _search_result = require('./search_result');var _search_result2 = _interopRequireDefault(_search_result);
var _search_result_handler = require('./search_result_handler');var _search_result_handler2 = _interopRequireDefault(_search_result_handler);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

/**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Agent request manager. <br />

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * 각 기관의 Agent에서 전달 된 HttpRequest를
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * 받아서 처리하는 모듈입니다.
var
AgentRequestManager = function (_AbstractManager) {_inherits(AgentRequestManager, _AbstractManager);

    function AgentRequestManager(opt) {_classCallCheck(this, AgentRequestManager);var _this = _possibleConstructorReturn(this, (AgentRequestManager.__proto__ || Object.getPrototypeOf(AgentRequestManager)).call(this,
        opt));
        _this.entityMap = new _hashmap2.default();
        _this.handlerMap = new _hashmap2.default();return _this;
    }_createClass(AgentRequestManager, [{ key: 'init', value: function init(

        from) {
            this.entityMap.set("SearchResult", _search_result2.default);
            this.handlerMap.set(_search_result2.default, new _search_result_handler2.default());
        } }, { key: 'getEntity', value: function getEntity(

        code) {
            return this.entityMap.get(code);
        }

        /**
           * 
           * @param {AbstractAgentRequest} agentRequest 
           */ }, { key: 'request', value: function request(
        requestEntity) {
            this.handlerMap.get(requestEntity).request(requestEntity);
        } }]);return AgentRequestManager;}(_abstract_manager2.default);


AgentRequestManager.RESULT_FAILURE = 0;
AgentRequestManager.RESULT_SUCCESS = 1;exports.default =

AgentRequestManager;
//# sourceMappingURL=agent_request.js.map