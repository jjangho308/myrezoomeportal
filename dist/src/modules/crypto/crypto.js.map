{"version":3,"sources":["../../../../src/modules/crypto/crypto.js"],"names":["CryptoManager","opt","spec","length","cb","randomBytes","symLength","err","key","toString","encode","dh","createDiffieHellman","asmLength","generateKeys","pub","getPublicKey","pri","getPrivateKey","plain","generatePRN","ivLength","iv","cipher","createCipheriv","symAlg","Buffer","from","setAutoPadding","encrypted","update","final","bind","decipher","createDecipheriv","decrypted"],"mappings":"gnBAAA,gC;;AAEA,uD;;AAEA;;;;;;AAMMA,a;;AAEF,2BAAYC,GAAZ,EAAiB;AACPA,WADO;AAEhB,K;;AAEM;;AAEN;;AAED;;;;;;;;;;AAUeC,Y,EAAM;AACjB,iBAAKA,IAAL,GAAYA,IAAZ;AACH;;AAED;;;;;;;;;AASYC,c,EAAQC,E,EAAI;AACpB,6BAAOC,WAAP,CAAmBF,MAAnB,EAA2BC,EAA3B;AACH,S;;AAEcA,U,EAAI;AACf,6BAAOC,WAAP,CAAmB,KAAKH,IAAL,CAAUI,SAA7B,EAAwC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClD,oBAAID,GAAJ,EAAS;AACLH,uBAAGG,GAAH;AACH;AACDH,mBAAG,IAAH,EAASI,IAAIC,QAAJ,CAAa,OAAKP,IAAL,CAAUQ,MAAvB,CAAT;AACH,aALD;AAMH,S;;AAEkBN,U,EAAI;AACnB,gBAAIO,KAAK,iBAAOC,mBAAP,CAA2B,KAAKV,IAAL,CAAUW,SAArC,CAAT;AACAF,eAAGG,YAAH,CAAgB,KAAKZ,IAAL,CAAUQ,MAA1B;AACAN,eAAG,IAAH,EAAS;AACLW,qBAAKJ,GAAGK,YAAH,CAAgB,KAAKd,IAAL,CAAUQ,MAA1B,CADA;AAELO,qBAAKN,GAAGO,aAAH,CAAiB,KAAKhB,IAAL,CAAUQ,MAA3B,CAFA,EAAT;;AAIH;;AAED;;;;;;;AAOWS,a,EAAOX,G,EAAKJ,E,EAAI;AACvB,iBAAKgB,WAAL,CAAiB,KAAKlB,IAAL,CAAUmB,QAA3B,EAAsC,UAACd,GAAD,EAAMe,EAAN,EAAa;AAC/C,oBAAIC,SAAS,iBAAOC,cAAP,CAAsB,OAAKtB,IAAL,CAAUuB,MAAhC,EAAwCC,OAAOC,IAAP,CAAYnB,GAAZ,EAAiB,OAAKN,IAAL,CAAUQ,MAA3B,CAAxC,EAA4EY,EAA5E,CAAb;AACAC,uBAAOK,cAAP,CAAsB,IAAtB;AACA,oBAAIC,YAAYN,OAAOO,MAAP,CAAcX,KAAd,EAAqB,MAArB,EAA6B,OAAKjB,IAAL,CAAUQ,MAAvC,CAAhB;AACAmB,6BAAaN,OAAOQ,KAAP,CAAa,OAAK7B,IAAL,CAAUQ,MAAvB,CAAb;AACAN,mBAAG,IAAH,EAASkB,GAAGb,QAAH,CAAY,OAAKP,IAAL,CAAUQ,MAAtB,CAAT,EAAwCmB,SAAxC;AACH,aANoC,CAMlCG,IANkC,CAM7B,IAN6B,CAArC;AAOH;;AAED;;;;;;;;AAQWH,iB,EAAWrB,G,EAAKc,E,EAAIlB,E,EAAI;AAC/B,gBAAI6B,WAAW,iBAAOC,gBAAP,CAAwB,KAAKhC,IAAL,CAAUuB,MAAlC,EAA0CC,OAAOC,IAAP,CAAYnB,GAAZ,EAAiB,KAAKN,IAAL,CAAUQ,MAA3B,CAA1C,EAA8EgB,OAAOC,IAAP,CAAYL,EAAZ,EAAgB,KAAKpB,IAAL,CAAUQ,MAA1B,CAA9E,CAAf;AACA,gBAAIyB,YAAYF,SAASH,MAAT,CAAgBD,SAAhB,EAA2B,KAAK3B,IAAL,CAAUQ,MAArC,EAA6C,MAA7C,CAAhB;AACAyB,yBAAaF,SAASF,KAAT,CAAe,MAAf,CAAb;AACA3B,eAAG,IAAH,EAAS+B,SAAT;AACH,S;;AAEUhB,a,EAAOX,G,EAAKJ,E,EAAI;;AAE1B,S;;AAEUyB,iB,EAAWrB,G,EAAKJ,E,EAAI;;AAE9B,S;;;AAGUJ,a","file":"crypto.js","sourcesContent":["import crypto from 'crypto';\r\n\r\nimport AbstractManager from '../abstract_manager';\r\n\r\n/**\r\n * CryptoManager. <br />\r\n * \r\n * @since 183013\r\n * @author TACKSU\r\n */\r\nclass CryptoManager extends AbstractManager {\r\n\r\n    constructor(opt) {\r\n        super(opt);\r\n    }\r\n\r\n    init() {\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {object} spec {\r\n     *      symAlg      : Algorithm of symetric crypto.\r\n     *      symLength   : Length of AES Key,\r\n     *      asmAlg      : ALgorithm of assymetric crypto.\r\n     *      asmLength   : Length of RSA Key pair.\r\n     *      encode      : Encoding scheme.\r\n     * }\r\n     */\r\n    setDefaultSpec(spec) {\r\n        this.spec = spec;\r\n    }\r\n\r\n    /**\r\n     * Generate random number with given length. <br />\r\n     * \r\n     * @since 180305\r\n     * @author TACKSU\r\n     * \r\n     * @param {number} length Length of data to be generated..\r\n     * @param {function} cb Callback.\r\n     */\r\n    generatePRN(length, cb) {\r\n        crypto.randomBytes(length, cb);\r\n    }\r\n\r\n    generateAESKey(cb) {\r\n        crypto.randomBytes(this.spec.symLength, (err, key) => {\r\n            if (err) {\r\n                cb(err);\r\n            }\r\n            cb(null, key.toString(this.spec.encode));\r\n        });\r\n    }\r\n\r\n    generateRSAKeyPair(cb) {\r\n        var dh = crypto.createDiffieHellman(this.spec.asmLength);\r\n        dh.generateKeys(this.spec.encode);\r\n        cb(null, {\r\n            pub: dh.getPublicKey(this.spec.encode),\r\n            pri: dh.getPrivateKey(this.spec.encode)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Encrypt data with symmetric key and iv. <br />\r\n     * \r\n     * @param {string} plain Plain text.\r\n     * @param {string} key Symmetric key.\r\n     * @param {function} cb Callback function\r\n     */\r\n    encryptAES(plain, key, cb) {\r\n        this.generatePRN(this.spec.ivLength, ((err, iv) => {\r\n            var cipher = crypto.createCipheriv(this.spec.symAlg, Buffer.from(key, this.spec.encode), iv);\r\n            cipher.setAutoPadding(true);\r\n            var encrypted = cipher.update(plain, 'utf8', this.spec.encode);\r\n            encrypted += cipher.final(this.spec.encode);\r\n            cb(null, iv.toString(this.spec.encode), encrypted);\r\n        }).bind(this));\r\n    }\r\n\r\n    /**\r\n     * Decrypt string with symmetric key and iv.\r\n     * \r\n     * @param {*} encrypted \r\n     * @param {*} key \r\n     * @param {*} iv \r\n     * @param {*} cb \r\n     */\r\n    decryptAES(encrypted, key, iv, cb) {\r\n        var decipher = crypto.createDecipheriv(this.spec.symAlg, Buffer.from(key, this.spec.encode), Buffer.from(iv, this.spec.encode));\r\n        var decrypted = decipher.update(encrypted, this.spec.encode, 'utf8');\r\n        decrypted += decipher.final('utf8');\r\n        cb(null, decrypted);\r\n    }\r\n\r\n    encryptRSA(plain, key, cb) {\r\n\r\n    }\r\n\r\n    decryptRSA(encrypted, key, cb) {\r\n\r\n    }\r\n}\r\n\r\nexport default CryptoManager;"]}