{"version":3,"sources":["../../../../src/modules/push/push.js"],"names":["PushManager","opt","propertyManager","property","connect","host","get","PUSH_HOST","port","PUSH_PORT","ssl","connectHeaders","PUSH_HEADER_HOST","login","PUSH_HEADER_LOGIN","passcode","PUSH_HEADER_PASSCODE","factory","console","log","cb","connections","ConnectFailover","maxReconnects","on","connector","address","serverProperties","remoteAddress","transportPath","error","connectArgs","message","channelFactory","ChannelFactory","channel","err","bind","msg","orgs","sqlparam","i","JSON","stringify","code","length","db","getOrgDao","getByCodes","result","msgString","send","queueName","call","close"],"mappings":"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","file":"push.js","sourcesContent":["import stompit from 'stompit'\r\n\r\nimport Managers from \"../../core/managers\";\r\n\r\nimport AbstractManager from \"../abstract_manager\";\r\nimport Property from \"../property/property\";\r\n\r\n/**\r\n * PushManager. <br />\r\n * \r\n * @author 신창호.\r\n * @since 180228\r\n */\r\nclass PushManager extends AbstractManager {\r\n    constructor(opt) {\r\n        super(opt);\r\n    }\r\n\r\n    init() {\r\n        //property를 가져온다\r\n        var propertyManager = Managers.property();\r\n\r\n        this.connect([{\r\n            host: propertyManager.get(Property.PUSH_HOST),\r\n            port: propertyManager.get(Property.PUSH_PORT),\r\n            ssl: true,\r\n            connectHeaders: {\r\n                host: propertyManager.get(Property.PUSH_HEADER_HOST),\r\n                login: propertyManager.get(Property.PUSH_HEADER_LOGIN),\r\n                passcode: propertyManager.get(Property.PUSH_HEADER_PASSCODE)\r\n            }\r\n        }], (factory) => {\r\n            console.log(\"AMQ Connect Success!\");\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Connect AMQ server. <br />\r\n     * \r\n     * @since 180302\r\n     * @param {object} opt \r\n     */\r\n    connect(opt, cb) {\r\n        var connections = new stompit.ConnectFailover(opt, {\r\n            maxReconnects: 1\r\n        });\r\n\r\n        connections.on('connecting', function (connector) {\r\n            var address = connector.serverProperties.remoteAddress.transportPath;\r\n            console.log('Connecting to ' + address);\r\n        })\r\n\r\n        connections.on('error', function (error) {\r\n            var connectArgs = error.connectArgs;\r\n            var address = connectArgs.host + ':' + connectArgs.port;\r\n\r\n            console.log('Connection error to ' + address + ': ' + error.message);\r\n        });\r\n\r\n        this.channelFactory = new stompit.ChannelFactory(connections);\r\n        this.channelFactory.channel(function (err, channel) {\r\n            if (err) {\r\n                console.log('channel factory error: ' + error.message);\r\n                return;\r\n            }\r\n            this.channel = channel;\r\n\r\n        }.bind(this))\r\n        cb(this.channelFactory);\r\n    }\r\n\r\n\r\n    /**\r\n     * Send Message to AMQ Server <br />\r\n     * \r\n     * @since 180302\r\n     * @param {object} msg\r\n     */\r\n    sendMessage(msg, orgs, cb) {\r\n\r\n        // FIXME 이렇게 할 경우 아래의 this.msg에서 access했을 때 의도한 msg와 다른 msg가 들어 있을 가능성 있음\r\n        // this.msg = msg;\r\n        // 1.getting QueueName, using orgcode..\r\n        // 1.1 make SQL Param\r\n        var sqlparam = '';\r\n        for (var i in orgs) {\r\n            sqlparam += JSON.stringify(orgs[i].code);\r\n            if (i != (orgs.length - 1)) {\r\n                sqlparam = sqlparam + \",\";\r\n            }\r\n        }\r\n\r\n        var db = Managers.db();\r\n\r\n        db.getOrgDao().getByCodes(orgs, ((err, result) => {\r\n            !!err ? cb(err) : (() => {\r\n                var msgString = JSON.stringify(msg);\r\n                for (var i in result) {\r\n\r\n                    //seeting destination at this.destination\r\n                    this.channel.send(result[i].queueName, msgString, err => {\r\n\r\n                        if (err) {\r\n                            console.log('send error: ' + err.message);\r\n                            cb(err)\r\n                        }\r\n                        console.log('sent message');\r\n                        cb(null);\r\n                    });\r\n                }\r\n            }).call(this);\r\n        }).bind(this));\r\n    }\r\n\r\n    disconnect() {\r\n        this.channel.close();\r\n    }\r\n\r\n}\r\n\r\nexport default PushManager;"]}