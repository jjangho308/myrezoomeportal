{"version":3,"sources":["../../../../src/modules/client/client_request.js"],"names":["ClientRequestManager","opt","entityMap","handlerMap","requestMap","set","setPrepared","code","get","entity","prototype","request","mid","requestHandler","constructor","resultCode","result","RESULT_FAILURE","RESULT_PENDING","RESULT_SUCCESS","bind","requestId","response","cb"],"mappings":"gnBAAA,kC;;AAEA,uD;;;AAGA,0D;;AAEA,gD;AACA,gE;;AAEA;;;;;;;AAOMA,oB;AACF,kCAAYC,GAAZ,EAAiB;AACPA,WADO;AAEb,cAAKC,SAAL,GAAiB,uBAAjB;AACA,cAAKC,UAAL,GAAkB,uBAAlB;AACA,cAAKC,UAAL,GAAkB,uBAAlB,CAJa;AAKhB,K;;AAEM;AACH,iBAAKF,SAAL,CAAeG,GAAf,CAAmB,QAAnB;AACA,iBAAKF,UAAL,CAAgBE,GAAhB,0BAAyC,qCAAzC;;AAEA,iBAAKC,WAAL;AACH,S;;AAESC,Y,EAAM;AACZ,mBAAO,KAAKL,SAAL,CAAeM,GAAf,CAAmBD,IAAnB,CAAP;AACH,S;;AAEUE,c,EAAQ;AACf,mBAAO,KAAKN,UAAL,CAAgBK,GAAhB,CAAoBC,OAAOC,SAA3B,CAAP;AACH;;AAED;;;;;AAKQC,gB,EAAS;AACb,iBAAKP,UAAL,CAAgBC,GAAhB,CAAoBM,SAAQC,GAA5B,EAAiCD,QAAjC;AACA,iBAAKE,cAAL,CAAoBL,GAApB,CAAwBG,SAAQG,WAAhC,EAA6CH,OAA7C,CAAqDA,QAArD,EAA+D,UAACI,UAAD,EAAaC,MAAb,EAAwB;AACnF,wBAAQD,UAAR;AACI,yBAAKf,qBAAqBiB,cAA1B;AACI;AACI;AACA;AACH;;AAEL,yBAAKjB,qBAAqBkB,cAA1B;AACI;AACI;AACA,mCAAKd,UAAL,CAAgBC,GAAhB,CAAoBM,SAAQC,GAA5B,EAAiCD,QAAjC;AACA;AACH;;AAEL,yBAAKX,qBAAqBmB,cAA1B;AACI;AACI;AACA;AACH,yBAlBT;;AAoBH,aArB6D,CAqB3DC,IArB2D,CAqBtD,IArBsD,CAA9D;AAsBH;;AAED;;;;;;AAMSC,iB,EAAWC,S,EAAUC,E,EAAI;AAC9B,gBAAId,SAAS,KAAKL,UAAL,CAAgBI,GAAhB,CAAoBa,SAApB,CAAb;AACA,iBAAKlB,UAAL,CAAgBK,GAAhB,CAAoBC,OAAOK,WAA3B,EAAwCQ,QAAxC,CAAiDb,MAAjD,EAAyDa,SAAzD;AACH,S;;;AAGLtB,qBAAqBmB,cAArB,GAAsC,CAAtC;AACAnB,qBAAqBkB,cAArB,GAAsC,CAAtC;AACAlB,qBAAqBiB,cAArB,GAAsC,CAAtC,C;;AAEejB,oB","file":"client_request.js","sourcesContent":["import HashMap from 'hashmap';\r\n\r\nimport AbstractManager from \"../abstract_manager\";\r\n\r\n\r\nimport UserLoginHandler from './user_login_handler';\r\n\r\nimport SearchRecordRequest from './search_record';\r\nimport SearchRecordHandler from './search_record_handler';\r\n\r\n/**\r\n * Request job manager from client. <br />\r\n * 초기화 시 Job map를 생성하며 Client channel의 HTTP Request 발생 시 Job을 생성하여 저장한다.\r\n * Agent에서 Http 요청이 올 때 여기 저장된 Job을 기반으로 해당 Client에 Socket Push를 전송하도록 한다.\r\n * \r\n * @since 180228\r\n */\r\nclass ClientRequestManager extends AbstractManager {\r\n    constructor(opt) {\r\n        super(opt);\r\n        this.entityMap = new HashMap();\r\n        this.handlerMap = new HashMap();\r\n        this.requestMap = new HashMap();\r\n    }\r\n\r\n    init() {\r\n        this.entityMap.set('Search', SearchRecordRequest);\r\n        this.handlerMap.set(SearchRecordRequest, new SearchRecordHandler());\r\n\r\n        this.setPrepared();\r\n    }\r\n\r\n    getEntity(code) {\r\n        return this.entityMap.get(code);\r\n    }\r\n\r\n    getHandler(entity) {\r\n        return this.handlerMap.get(entity.prototype);\r\n    }\r\n\r\n    /**\r\n     * Handle client request\r\n     * \r\n     * @param {AbstractClientRequest} request\r\n     */\r\n    request(request) {\r\n        this.requestMap.set(request.mid, request);\r\n        this.requestHandler.get(request.constructor).request(request, ((resultCode, result) => {\r\n            switch (resultCode) {\r\n                case ClientRequestManager.RESULT_FAILURE:\r\n                    {\r\n                        // result instanceof Error Retry?\r\n                        break;\r\n                    }\r\n\r\n                case ClientRequestManager.RESULT_PENDING:\r\n                    {\r\n                        // result instanceof Object Keep request?\r\n                        this.requestMap.set(request.mid, request);\r\n                        break;\r\n                    }\r\n\r\n                case ClientRequestManager.RESULT_SUCCESS:\r\n                    {\r\n                        // Remove request?\r\n                        break;\r\n                    }\r\n            }\r\n        }).bind(this));\r\n    }\r\n\r\n    /**\r\n     * Agent에서 비동기적인 응답이 전달되면 ClientRequest가 들고 있던\r\n     * socket을 통해 ClientBrowser로 Response를 push 한다.\r\n     * @param {*} requestId \r\n     * @param {*} response \r\n     */\r\n    response(requestId, response, cb) {\r\n        var entity = this.requestMap.get(requestId);\r\n        this.handlerMap.get(entity.constructor).response(entity, response);\r\n    }\r\n}\r\n\r\nClientRequestManager.RESULT_SUCCESS = 0;\r\nClientRequestManager.RESULT_PENDING = 1;\r\nClientRequestManager.RESULT_FAILURE = 2;\r\n\r\nexport default ClientRequestManager"]}