{"version":3,"sources":["../../../../src/modules/client/user_login_handler.js"],"names":["UserLoginRequestHandler","opt","clientReq","clientRes","db","getUserInfo","userid","res","console","log","password","PASSWORD","date","Date","userInfo","timestamp","getTime","tokenvalue","token","generateToken","response","code","result","send"],"mappings":"gnBAAA,+C;AACA,kF;;AAEA;;;AAGMA,uB;AACF,qCAAYC,GAAZ,EAAiB;AACPA,WADO;AAEhB;;AAED;;;;;AAKQC,iB,EAAWC,S,EAAW;;AAE1B;AACA,+BAASC,EAAT,GAAcC,WAAd,CAA0BH,UAAUI,MAApC,EAA4C,UAAUC,GAAV,EAAe;;AAEvDC,wBAAQC,GAAR,CAAYF,GAAZ;;AAEA;AACA,oBAAI,CAAC,CAACA,GAAN,EAAW;AACP;AACA,wBAAIL,UAAUQ,QAAV,KAAuBH,IAAI,CAAJ,EAAOI,QAAlC,EAA4C;AACxC;AACA,4BAAIC,OAAO,IAAIC,IAAJ,EAAX;AACA,4BAAIC,WAAW,EAAf;AACAA,iCAASR,MAAT,GAAkBJ,UAAUI,MAA5B;AACAQ,iCAASC,SAAT,GAAqBH,KAAKI,OAAL,EAArB;AACA,4BAAIC,aAAa,mBAASC,KAAT,GAAiBC,aAAjB,CAA+BL,QAA/B,CAAjB;;AAEA,4BAAIM,WAAW,EAAf;AACAA,iCAASF,KAAT,GAAiBD,UAAjB;AACAG,iCAASC,IAAT,GAAgB,GAAhB;AACAD,iCAASE,MAAT,GAAkB,eAAlB;AACAnB,kCAAUoB,IAAV,CAAeH,QAAf;AACH,qBAbD,MAaO;AACH;AACAjB,kCAAUoB,IAAV,CAAe,+BAAf;AACH;AACJ,iBAnBD,MAmBO;AACH;AACApB,8BAAUoB,IAAV,CAAe,0BAAf;AACH;AACJ,aA5BD;AA6BH,S;;;AAGUvB,uB","file":"user_login_handler.js","sourcesContent":["import managers from '../../core/managers';\r\nimport AbstractClientRequestHandler from './abstract_clientrequest_handler';\r\n\r\n/**\r\n * 사용자 로그인 요청 핸들러.\r\n*/\r\nclass UserLoginRequestHandler extends AbstractClientRequestHandler {\r\n    constructor(opt) {\r\n        super(opt);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {UserLoginRequest} clientReq \r\n     * @param {UserLoginResponse} clientRes\r\n     */\r\n    process(clientReq, clientRes) {\r\n        \r\n        // 1. 사용자 정보를 DB에서 조회\r\n        managers.db().getUserInfo(clientReq.userid, function (res) {\r\n\r\n            console.log(res);\r\n\r\n            // 사용자 유저 존재\r\n            if (!!res) {\r\n                // 비밀번호 확인\r\n                if (clientReq.password === res[0].PASSWORD) {\r\n                    // 토큰 생성\r\n                    var date = new Date();                    \r\n                    var userInfo = {};\r\n                    userInfo.userid = clientReq.userid;\r\n                    userInfo.timestamp = date.getTime();\r\n                    var tokenvalue = managers.token().generateToken(userInfo);\r\n\r\n                    var response = {};\r\n                    response.token = tokenvalue;\r\n                    response.code = 200;\r\n                    response.result = \"login success\";\r\n                    clientRes.send(response);\r\n                } else {\r\n                    // 비밀번호 실패\r\n                    clientRes.send(\"login fail::mismatch password\");                    \r\n                }\r\n            } else {\r\n                // 사용자 유저 없음\r\n                clientRes.send(\"login fail::id not exist\");\r\n            }            \r\n        });\r\n    }\r\n}\r\n\r\nexport default UserLoginRequestHandler;\r\n\r\n"]}